/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hatt;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author joakimfockstedt
 */
public class showOrders extends javax.swing.JFrame {

    /**
     * Creates new form showOrders
     */
    public showOrders() {
        initComponents();
        new Database();
        fillModelSales();
        fillModelBuy();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableBuy = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableSale = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblMomsSale = new javax.swing.JLabel();
        lblMomsBuy = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblPriceTotalBuy = new javax.swing.JLabel();
        lblPriceTotalSale = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 600));
        setPreferredSize(new java.awt.Dimension(600, 600));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTableBuy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Material", "Skapad av", "Pris ink moms", "Pris ex moms"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableBuy);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 560, 160));

        jLabel1.setText("Visa ordrar");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 0, -1, -1));

        jTableSale.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Beskrivning", "Estimerad Tid", "Kund", "Skapad av", "Pris ink moms", "Pris ex moms"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableSale);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 27, 560, 160));

        jLabel2.setText("Sammanställning moms:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 200, -1, -1));

        jLabel3.setText("Sammanställning moms:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 410, -1, -1));

        jLabel4.setText("Inköp");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        jLabel5.setText("Försäljningar");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));
        getContentPane().add(lblMomsSale, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 200, -1, -1));
        getContentPane().add(lblMomsBuy, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 410, -1, -1));

        jLabel6.setText("Sammanställning pris: ");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, -1, -1));

        jLabel7.setText("Sammanställning pris: ");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 410, -1, -1));
        getContentPane().add(lblPriceTotalBuy, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 410, -1, -1));
        getContentPane().add(lblPriceTotalSale, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 200, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(showOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(showOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(showOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(showOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new showOrders().setVisible(true);
            }
        });
    }

    private void fillModelSales() {
        DefaultTableModel model = (DefaultTableModel) jTableSale.getModel();
        ArrayList<HashMap<String, String>> list = Database.fetchRows(true, "xOrder", "ordertype", "'J'");
        Calculate c = new Calculate();

        for (HashMap<String, String> row : list) {
            String description = "";
            String timeEstimate = "";
            String customer = "";
            String creator = "";
            String priceIncMoms = "";
            String priceExMoms = "";
            for (String key : row.keySet()) {
                switch (key) {
                    case "description":
                        description = row.get(key);
                    case "estimated_time":
                        timeEstimate = row.get(key);
                    case "customer":
                        if (row.get(key) == null) {
                            customer = "Kunden finns inte i systemet";
                        } else {
                            customer = Database.fetchSingle("name", "customer", "cid", row.get(key));
                        }
                    case "created_by":
                        creator = Database.fetchSingle("name", "user", "uid", row.get(key));
                        break;
                    case "price":
                        priceIncMoms = row.get(key);
                        break;
                }
            }
            model.addRow(new Object[]{description, timeEstimate, customer, creator, priceIncMoms, c.calculateMoms(priceIncMoms)});
        }
        lblMomsSale.setText(calculateTotalMoms(true, "'J'"));
        lblPriceTotalSale.setText(calculateTotalMoms(false, "'J'"));
    }

    private void fillModelBuy() {
        DefaultTableModel model = (DefaultTableModel) jTableBuy.getModel();
        ArrayList<HashMap<String, String>> list = Database.fetchRows(true, "xOrder", "ordertype", "'N'");
        Calculate c = new Calculate();

        for (HashMap<String, String> row : list) {
            String description = "";
            String creator = "";
            String priceIncMoms = "";
            String priceExMoms = "";
            for (String key : row.keySet()) {
                switch (key) {
                    case "description":
                        description = row.get(key);
                    case "created_by":
                        creator = Database.fetchSingle("name", "user", "uid", row.get(key));
                        break;
                    case "price":
                        priceIncMoms = row.get(key);
                        break;
                }
            }
            model.addRow(new Object[]{description, creator, priceIncMoms, c.calculateMoms(priceIncMoms)});
        }
        lblMomsBuy.setText(calculateTotalMoms(true, "'N'"));
        lblPriceTotalBuy.setText(calculateTotalMoms(false, "'N'"));
    }

    //Returnerar moms ifall boolean är true
    private String calculateTotalMoms(boolean returnMoms, String ordertype) {
        String sumString = "";
        Double sum = 0.0;
        ArrayList<String> list = Database.fetchColumn(true, "price", "xOrder", "ordertype", ordertype);
        for (String priceInstance : list) {
            Double priceInstanceD = Double.parseDouble(priceInstance);
            sum += priceInstanceD;
        }
        if (returnMoms) {
            sum = sum * 0.25;
        }
        sum = Calculate.round(sum, 3);
        sumString = sum.toString();
        return sumString;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableBuy;
    private javax.swing.JTable jTableSale;
    private javax.swing.JLabel lblMomsBuy;
    private javax.swing.JLabel lblMomsSale;
    private javax.swing.JLabel lblPriceTotalBuy;
    private javax.swing.JLabel lblPriceTotalSale;
    // End of variables declaration//GEN-END:variables
}
