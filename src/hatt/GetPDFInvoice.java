/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hatt;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.font.Standard14Fonts;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author Erik
 */
public class GetPDFInvoice extends javax.swing.JFrame {

    InfDB idb;

    /**
     * Creates new form GetPDFInvoice
     */
    public GetPDFInvoice() {
        new Database();
        try {
            idb = new InfDB("hattmakardb", "3306", "hattmakare", "Hattsweatshop");
        } catch (InfException ex) {
            ex.printStackTrace();
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CBxOrder = new javax.swing.JComboBox<>();
        btwCreateInvoice = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CBxOrder.setModel(new javax.swing.DefaultComboBoxModel<>(getCBInvoice()));

        btwCreateInvoice.setText("Skapa faktura");
        btwCreateInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btwCreateInvoiceActionPerformed(evt);
            }
        });

        jLabel1.setText("Välj order");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CBxOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78)
                        .addComponent(btwCreateInvoice))
                    .addComponent(jLabel1))
                .addContainerGap(143, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CBxOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btwCreateInvoice))
                .addContainerGap(247, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btwCreateInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btwCreateInvoiceActionPerformed
        // TODO add your handling code here:
        createPDF();
    }//GEN-LAST:event_btwCreateInvoiceActionPerformed

    /**
     * @param args the command line arguments
     */
    public String[] getCBInvoice() {
        ArrayList<String> CBAL = new ArrayList<>();

        CBAL = Database.fetchColumn(false, "description", "xorder", "", "");

        String[] CBOrders = new String[CBAL.size()];
        CBAL.toArray(CBOrders);

        return CBOrders;
    }

    public void createPDF() {
        LocalDate localdate = LocalDate.now();

        String amount = "";
        String productName = "";
        String date = localdate.toString();
        String InvoiceID = "";

        HashMap<String, String> infoHM = new HashMap<>();

        try {
            amount = idb.fetchSingle("SELECT price FROM xOrder WHERE oid in "
                    + "(SELECT oid FROM xorder WHERE description = '" + CBxOrder.getSelectedItem().toString() + "')");
            productName = CBxOrder.getSelectedItem().toString();
            InvoiceID = idb.fetchSingle("SELECT inid FROM invoice WHERE oid in "
                    + "(SELECT oid FROM xOrder WHERE description = '" + CBxOrder.getSelectedItem().toString() + "')");
            infoHM = idb.fetchRow("SELECT name, address, phone, email FROM customer WHERE cid in "
                    + "(SELECT customer FROM xorder WHERE description = '" + CBxOrder.getSelectedItem().toString() + "')");

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        if (InvoiceID == null) {
            InvoiceID = Database.getAutoIncrement("invoice", "inid");
        }
        String fileName = InvoiceID + " " + productName + ".pdf";
        ArrayList<String> infoAL = new ArrayList<>();
        String[] info = new String[infoHM.size()];
        for (HashMap.Entry<String, String> entry : infoHM.entrySet()) {
            infoAL.add(entry.getValue());
        }
        infoAL.toArray(info);

        try {
            PDDocument document = new PDDocument();

            PDPage page = new PDPage();
            document.addPage(page);

            PDPageContentStream contentStream = new PDPageContentStream(document, page);

            contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.TIMES_ROMAN), 12);

            contentStream.beginText();

            contentStream.newLineAtOffset(100, 700);

            //for(int i = 0; i < 6; i++){
            // switch (i){
            //     case 0:
            //        contentStream.showText("Belopp: " + amount);
            //    case 1:
            //         contentStream.newLineAtOffset(i , 700);
            //  } 
            boolean showCustomer = false;
            String info1 = "";
            String info2 = "";
            String info3 = "";
            String info4 = "";
            if (infoHM.size() == 4) {
                info1 = info[0];
                info2 = info[1];
                info3 = info[2];
                info4 = info[3];
                showCustomer = true;
            }

            contentStream.showText("Belopp: " + amount + " inkl. moms");
            contentStream.newLineAtOffset(0, -50);
            contentStream.showText("produkt: " + productName);
            contentStream.newLineAtOffset(0, -50);
            contentStream.showText("Fakturanummer: " + InvoiceID);
            contentStream.newLineAtOffset(0, -50);
            if (showCustomer) {
                contentStream.showText("Försäljning.");
                contentStream.newLineAtOffset(0, -50);
                contentStream.showText("Kunduppgifter: " + info1 + " " + info2 + " " + info3 + " " + info4);
            } else {
                contentStream.showText("Inköp av material.");

            }
            contentStream.newLineAtOffset(0, -50);
            contentStream.showText("Ottos Hattmakeri, Örebro, Hattmakarvgen 1, 019-303 878");
            contentStream.newLineAtOffset(0, -50);

            // "Belopp: " + amount    
            //        + "\rprodukt: " + productName
            //        + "\rDatum: " + date 
            //        + "\rFakturanummer" + InvoiceID
            //        + "\rHandlares personuppgifter: " + info 
            //        + "\rOttos Hattmakeri, Örebro, Hattmakarvgen 1, 019-303 878"
            contentStream.endText();

            contentStream.close();

            document.save(fileName);

            document.close();

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GetPDFInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GetPDFInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GetPDFInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GetPDFInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GetPDFInvoice().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CBxOrder;
    private javax.swing.JButton btwCreateInvoice;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
